A. Tabel workers
 - Get One Worker By User Id: {
  Method: GET
  Endpoint: "/api/v1/workers/:user_id"
  Req.Param: user_id
  Query: JOIN Table with ALL TABLE that related to workers Table (Reference to ChatGPT for performance: https://chatgpt.com/share/68de21d2-a148-8007-b437-2971a1275732)
  Response: {
    data: {
      id,
      user_id,
      name,
      avatar_url,
      telephone,
      date_of_birth,
      gender_name,
      country_name,
      marriage_status_name,
      religion_name,
      address,
      profile_summary,
      current_salary,
      expected_salary,
      work_experiences: [{
        id,
        company_name,
        job_title,
        start_date,
        end_date,
        is_current,
        description,
        updated_at
      }],
      certifications: [{
        name,
        issuer,
        issue_date,
        expiry_date,
        credential_id,
        is_active,
        updated_at
      }],
      worker_skills: [{
        skill_id,
        skill_name,
      }],
      educations: [{
        id,
        institution_name,
        degree,
        major,
        start_date,
        end_date,
        is_current,
        description,
        updated_at
      }],
      languages: [{
        id, 
        language_name,
        proficiency_level_name,
        is_primary,
      }],
      resume: [{
        id,
        resume_url,
        title,
        is_default
      }],
      portfolios: [{
        id,
        title,
        description,
        link,
        is_public
      }]
    }
  }
 }

 - Insert Data Worker {
  Method: POST
  Endpoint: "/api/v1/workers"
  Req.Body: {
     user_id,
     name,
     avatar_url,
     telephone,
     date_of_birth,
     gender_id,
     nationality_id,
     region_id,
     marriage_status_id,
     address,
     profile_summary,
     current_salary,
     expected_salary
  }
  Response: {
    data: {
      id
    }
  }
 }

 - Update Data Worker {
  Method: PUT
  Endpont: "/api/v1/workers/:id"
  Req.Body: {
    id,
    user_id,
    name,
    avatar_url,
    telephone,
    date_of_birth,
    gender_id,
    nationality_id,
    region_id,
    marriage_status_id,
    address,
    profile_summary,
    current_salary,
    expected_salary,
    updated_at
  }
  Response: {
    data: {
      id
    }
  }
 }

1. Tabel work_experiences
 - Get All Work Experiences By Worker Id
  Method: GET
  Endpoint: "/api/v1/workers/:worker_id/work-exp",
  Req.Params: worker_id,
  Response : {
    data: [{
      id,
      company_name,
      job_title,
      start_date,
      end_date,
      is_current,
      description,
      updated_at
    }]
  }

 - Get One Work Exp By work exp id
  Method: GET
  Endpoint: "/api/v1/workers/:worker_id/work-exp/:id",
  Req.Params: worker_id, id
  Response: {
    data: {
      id,
      company_name,
      job_title,
      start_date,
      end_date,
      is_current,
      description,
      updated_at
    }
  }

 -  Insert One Work Experience By Worker Id
  Method: POST
  Endpoint: "/api/v1/workers/:worker_id/work-exp"
  Req.Params: worker_id,
  Req.Body: {
    company_name,
    job_title,
    start_date,
    end_date,
    is_current,
    description,
  }
  Response: {
    data: {
      id
    }
  }

 - Update One Work Experience By Worker Experience Id
 Method: PUT
 Endpoint: "/api/v1/workers/:worker_id/worker-exp/:id"
 Req.Params: worker_id, id
 Req.Body: {
    company_name,
    job_title,
    start_date,
    end_date,
    is_current,
    description,
 }
 Response: {
  data: {
    id
  }
 }

 - Delete One Work Experience By Worker Experience Id
 Method: DELETE
 Endpoint: "/api/v1/workers/:worker_id/worker-exp/:id"
 Req.Params: worker_id, id
 Response: {
  data: "Successfully deleted"
 }

2. Tabel certifications
 - Get All certifications By worker id
 Method: GET
 Endpoint: "/api/v1/workers/:worker_id/cert"
 Req.Params: worker_id
 Respons: {
  data: [{
    id,
    name,
    issuer,
    issue_date,
    expiry_date,
    credential_id,
    is_active,
    updated_at
  }]
 }

 -Get One certifications by worker id
 Method: GET
 Endpoint: "/api/v1/workers/:worker_id/cert/:id"
 Req.Params: worker_id, id
 Respons: {
  data: {
    id,
    name,
    issuer,
    issue_date,
    expiry_date,
    credential_id,
    is_active,
    updated_at
  }
 }

 -Insert One certifications by worker id
 Method: POST
 Endpoint: "/api/v1/workers/:worker_id/cert"
 Req.Params: worker_id
 Req.Body: {
    name,
    issuer,
    issue_date,
    expiry_date,
    credential_id,
    is_active
 }
 Respons: {
  data: {
    id
  }
 }

 -Update One certifications by worker id
 Method: PUT
 Endpoint: "/api/v1/workers/:worker_id/cert/:id"
 Req.Params: worker_id, id
 Req.Body: {
    name,
    issuer,
    issue_date,
    expiry_date,
    credential_id,
    is_active,
    updated_at
 }
 Respons: {
  data: {
    id
  }
 }

 -Delete One certifications by worker id
 Method: DELETE
 Endpoint: "/api/v1/workers/:worker_id/cert/:id"
 Req.Params: worker_id, id
 Respons: {
  data: "Certifications successfully deleted"
 }


3. Tabel worker_skills
 - Get All skill by worker id
 Method: GET
 Endpoint: "/api/v1/workers/:worker_id/skills"
 Query: JOIN table skill_worker with skills
 Req.Params: worker_id
 Response: {
  data: [{
    skill_name
  }]
 }

 - Insert One Skill by worker id
 Method: POST
 Endpoint: "/api/v1/workers/:worker_id/skills"
 Req.Params: worker_id
 Req.Body: {
  skill_id
 }
 Response: {
  data: {
    id
  }
 }

 - Delete One Skill by worker id and skill id
 Method: DELETE
 Endpoint: "/api/v1/workers/:worker_id/skills/:id"
 Req.Params: worker_id, id
 Response: {
  data: "Worker skill successfully deleted"
 }

3.1 Tabel skills
 - Get All skills
 Method: GET
 Endpoint: "/api/v1/skills?name="
 Req.Query: name
 Response: {
  data: [{
    id,
    skill_name
    created_at
  }]
 }

 - Get One Skill
 Method: GET
 Endpoint: "/api/v1/skills/:id"
 Req.Params: id
 Response: {
  data: {
    id,
    skill_name,
    created_at
  }
 }

 - Insert One Skill
 Method: POST
 Endpoint: "/api/v1/skills"
 Req.Body: {
  skill_name
 }
 Response: {
  data: {
    id
  }
 }

 - Delete One Skill
 Method: DELETE
 Endpoint: "/api/v1/skills/:id"
 Req.Params: id
 Response: {
  data: {
    id
  }
 }

4. Tabel educations
 - Get All Educations by worker id
 Method: GET
 Endpoint: "/api/v1/workers/:worker_id/edu"
 Req.Params: worker_id
 Response: {
  data: [{
    id,
    institution_name,
    degree,
    major,
    start_date,
    end_date,
    is_current,
    description,
    updated_at
  }]
 }

 - Get One Education by worker id
 Method: GET
 Endpoint: "/api/v1/workers/:worker_id/edu/:id"
 Req.Params: worker_id, id
 Response: {
    data: [{
      id,
      institution_name,
      degree,
      major,
      start_date,
      end_date,
      is_current,
      description,
      updated_at
  }]
 }

 - Insert one Education by worker id
 Method: POST
 Endpoint: "/api/v1/workers/:worker_id/edu"
 Req.Params: worker_id
 Req.Body: {
    institution_name,
    degree,
    major,
    start_date,
    end_date,
    is_current,
    description,
    updated_at
 }
 Response: {
  data: {
    id
  }
 }

 - Update one Education by worker id
 Method: PUT
 Endpoint: "/api/v1/workers/:worker_id/edu/:id"
 Req.Params: worker_id, id
 Req.Body: {
    institution_name,
    degree,
    major,
    start_date,
    end_date,
    is_current,
    description,
    updated_at
 }
 Response: {
  data: {
    id
  }
 }

 - Delete one Education by worker id
 Method: DELETE
 Endpoint: "/api/v1/workers/:worker_id/edu/:id"
 Req.Params: worker_id, id
 Response: {
  data: "Education successfully deleted"
 }

5. Tabel languages
 - GET ALL languages by worker id
 Method: GET
 Endpoint: "/api/v1/workers/:worker_id/lang"
 Req.Params : worker_id
 Respons: {
  data: [{
    id,
    language_name,
    proficiency_level_name,
    proficiency_level_id,
    is_primary,
    created_at,
    updated_at
  }]
 }

 -Insert One languange by worker id
 Method: POST
 Endpoint: "/api/v1/workers/:worker_id/lang"
 Req.Params : worker_id
 Req.Body: {
    language_name,
    proficiency_level_name,
    proficiency_level_id,
    is_primary,
    created_at,
    updated_at
 }
 Respons: {
  data: {
    id
  }
 }

 -Update One languange by worker id
 Method: PUT
 Endpoint: "/api/v1/workers/:worker_id/lang/:id"
 Req.Params: worker_id, id
 Req.Body: {
    language_name,
    proficiency_level_name,
    proficiency_level_id,
    is_primary,
    created_at,
    updated_at
 }
  Respons: {
  data: {
    id
  }
 }

 -Delete One language by worker id
 Method: DELETE
 Endpoint: "/api/v1/workers/:worker_id/lang/id"
 Response: {
  data: "Education successfully deleted"
 }

6. Tabel resumes
 - GET ALL resumes by worker id
 Method: GET
 Endpoint: "/api/v1/workers/:worker_id/resumes"
 Req.Params : worker_id
 Respons: {
  data: [{
    id, 
    resume_url,
    title,
    is_default,
    created_at,
    updated_at
  }]
 }

 -Insert One resume by worker id
 Method: POST
 Endpoint: "/api/v1/workers/:worker_id/resumes"
 Req.Params : worker_id
 Req.Body: {
    resume_url,
    title,
    is_default,
    created_at,
    updated_at
 }
 Respons: {
  data: {
    id
  }
 }

 -Update One resume by worker id
 Method: PUT
 Endpoint: "/api/v1/workers/:worker_id/resumes/:id"
 Req.Params: worker_id, id
 Req.Body: {
    resume_url,
    title,
    is_default,
    created_at,
    updated_at
 }
  Respons: {
  data: {
    id
  }
 }

 -Delete One resume by worker id
 Method: DELETE
 Endpoint: "/api/v1/workers/:worker_id/resumes/:id"
 Response: {
  data: "Resume successfully deleted"
 }

7. Tabel portfolios
 - GET ALL portfolios by worker id
 Method: GET
 Endpoint: "/api/v1/workers/:worker_id/portfolios"
 Req.Params : worker_id
 Respons: {
  data: [{
    id, 
    title,
    description,
    link,
    is_public,
    updated_at
  }]
 }

 -Insert One portfolio by worker id
 Method: POST
 Endpoint: "/api/v1/workers/:worker_id/portfolios"
 Req.Params : worker_id
 Req.Body: { 
    title,
    description,
    link,
    is_public,
    updated_at
 }
 Respons: {
  data: {
    id
  }
 }

 -Update One portfolio by worker id
 Method: PUT
 Endpoint: "/api/v1/workers/:worker_id/portfolios/:id"
 Req.Params: worker_id, id
 Req.Body: { 
    title,
    description,
    link,
    is_public,
    updated_at
 }
  Respons: {
  data: {
    id
  }
 }

 -Delete One portfolio by worker id
 Method: DELETE
 Endpoint: "/api/v1/workers/:worker_id/portfolios/:id"
 Response: {
  data: "Portfolios successfully deleted"
 }

B. Tabel recruiters
1. Tabel job_posts
2. Tabel job_post_tags
2.1 Tabel job_tags
3. Tabel job_post_questions
4. Tabel job_post_answer
5. Tabel job_applications